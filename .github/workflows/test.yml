name: CI

on:
  push:
    branches-ignore:
      - '*travis*'
      - '*appveyor*'
      - '*doozer*'
  pull_request:

jobs:
#  test_on_host:
#    name: Test on ${{ matrix.os }}
#    runs-on: ${{ matrix.os }}
#    strategy:
#     matrix:
#       os: [ubuntu-latest, windows-latest, macos-latest]
##       os: [ubuntu-latest]
#
#    steps:
#    - name: apt hacks
#      # the already installed libgd3 conflicts with libgd-dev to be installed
#      # also, /etc/apt/sources.list should be sufficient; all the other repositories are possibly problematic
#      run: |
#        sudo rm -f /etc/apt/sources.list.d/*.list
#        sudo apt-get update -qq
#        sudo apt-get remove -y libgd3 nginx
#      if: "startsWith(matrix.os, 'ubuntu-')"
#
#    - name: "perl installation (macos)"
#      run: |
#        brew install cpanminus
#      if: "startsWith(matrix.os, 'macos-')"
#
#    - name: "perl installation (windows)"
#      run: |
#        if (!(Test-Path -Path "C:\strawberry")) {
#          cinst strawberryperl
#        }
#      if: "startsWith(matrix.os, 'windows-')"
#
#    - name: "perl installation (ubuntu)"
#      run: |
#        sudo apt-get install -q --no-install-recommends -y cpanminus
#      if: "startsWith(matrix.os, 'ubuntu-')"
#
#    - name: perl test
#      run: |
#        perl -V
#        which cpanm

#        sleep 10
#        echo hello
#        sleep 10
#        echo world

#
#    - name: enable travis-helper-cpan-pm
#      run: |
#        git clone https://github.com/eserte/travis-helper-cpan-pm.git && ./travis-helper-cpan-pm/travis-helper-cpan-pm --distroprefs=https://github.com/eserte/srezic-cpan-distroprefs --enable-sysdeps
#
#    - name: install Net::SSLeay
#      run: cpan Net::SSLeay
#    - name: check Net::SSLeay
#      run: perl -MNet::SSLeay -e1

#    steps:
#    - uses: actions/checkout@v1
#    - name: test git-short-status
#      run: |
#        set -x
#        git config --global user.email "you@example.com"
#        git config --global user.name "Your Name"
#
#        git clone https://github.com/eserte/Doit.git
#        cd Doit
#
#        perl -Ilib -MDoit -e 'my $d=Doit->init; $d->add_component(qw(git)); warn $d->git_short_status'
#        git status --untracked-files=no --porcelain
#
#        touch new_file
#        perl -Ilib -MDoit -e 'my $d=Doit->init; $d->add_component(qw(git)); warn $d->git_short_status'
#        git status --untracked-files=no --porcelain
#
#        git add new_file
#        perl -Ilib -MDoit -e 'my $d=Doit->init; $d->add_component(qw(git)); warn $d->git_short_status'
#        git status --untracked-files=no --porcelain
#
#        git commit -m "test" new_file
#        perl -Ilib -MDoit -e 'my $d=Doit->init; $d->add_component(qw(git)); warn $d->git_short_status'
#        git status --untracked-files=no --porcelain

#    steps:
#    - uses: actions/checkout@v1
#    - name: Try to install libgd-dev
#      run: |
#        cat /etc/apt/sources.list
#        sudo rm -f /etc/apt/sources.list.d/*.list
#        sudo apt-get update -qq
#        apt-cache policy libgd3
#        sudo apt-get remove libgd3
#        sudo apt-get install libgd-dev

#    steps:
#    - uses: actions/checkout@v1
#    - name: Install deps on Mac
#      run: |
#        cpan -T Date::Parse
#        cpan LWP
#        cpan LWP::Protocol::https
#      if: "startsWith(matrix.os, 'macos-')"
#    - name: Build and test
#      run: |
#        perl Makefile.PL
#        make all test
#      if: "!startsWith(matrix.os,'windows-')"
#    - name: Build and test on Windows
#      run: |
#        c:\strawberry\perl\bin\perl Makefile.PL
#        gmake all test
#      if: "startsWith(matrix.os, 'windows-')"

  test_in_container:
    name: Container tests with ${{ matrix.container }}
    runs-on: ubuntu-20.04
    container: ${{ matrix.container }}
    strategy:
      matrix:
        include:
          - container:    ubuntu:20.04
#          - container:    debian:jessie
#          - container:    ~

    steps:
    - name: install Inline::C
      run: |
        apt update
        apt install -y perl-modules make gcc
        cpan Inline::C
        perl -e 'use Inline C => q{void test(){printf("Hello, world\n");}}; test();'

#    steps:
#    - uses: actions/checkout@v2
#    - name: Install deps
#      run: |
#        set -e
#        apt-get update -qq
#        apt-get install -q --no-install-recommends -y \
#            wget \
#            libimage-info-perl libplack-perl libcgi-emulate-psgi-perl libcgi-compile-perl \
#            libsereal-encoder-perl libsereal-decoder-perl \
#            libcpan-distnameinfo-perl libgravatar-url-perl libhtml-table-perl libwww-perl liburi-query-perl libjson-xs-perl libyaml-syck-perl
#      if: "matrix.dist == 'debian' || matrix.dist == 'ubuntu'"
#    - name: Build and test
#      run: |
#        set -e
#        true
#      if: "!startsWith(matrix.os,'windows-')"
