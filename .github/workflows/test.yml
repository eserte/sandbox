name: My Test CI Workflow

on:
#  push:
#    branches-ignore:
#      - '*travis*'
#      - '*appveyor*'
#      - '*doozer*'
#  pull_request:
  workflow_dispatch:
    inputs:
      test-only:
        type: boolean
        default: false

jobs:
     
#  test-expressions:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Debug inputs
#        run: echo "${{ toJSON(github.event.inputs) }}"
#
#      - name: ${{ inputs.test-only && 'test' || 'install' }}
#        run: |
#          echo "echo $GITHUB_WORKSPACE/ci-helper-cpan-pm/gh-mod-check --test-only=${{ inputs.test-only }}"
#          #echo 1: ${{ inputs.test-only && 'test' || 'install' }}
#          #echo 2.1: ${{ inputs.test-only == 'true' }}
#          #echo 2.2: ${{ inputs.test-only == true }}
#          #echo 3: ${{ inputs.test-only }}

#  mixed-vm-container:
#    name: Test on ${{ matrix.os }} and container ${{ matrix.container || '<none>' }}
#    runs-on: ${{ matrix.os }}
#    container: ${{ matrix.container }}
#    strategy:
#      matrix:
#        include:
#          - os: ubuntu-22.04
#            container: ~
#          - os: ubuntu-latest
#            container: fedora:39
#          - os: ubuntu-latest
#            container: alpine:latest
#    steps:
#      - name: What system
#        run: |
#          cat /etc/os-release

#  checkout-v4:
#    runs-on: ubuntu-latest
#    container: perl:5.22.4-stretch
#    steps:
#      # still fails (2023-10-24)
#      - uses: actions/checkout@v4

#  zgrep-pipe-error:
#    if: true
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v3
#    - run: |
#        ./pipefail.sh
#        wget -q https://www.cpan.org/modules/02packages.details.txt
#        gzip 02packages.details.txt
#        zgrep -q KARASIK/Prima-1.68001.tar.gz 02packages.details.txt.gz
#
#  vm-info:
#    if: false
#    runs-on: ubuntu-latest
#    steps:
#    - run: |
#        cat /proc/sys/fs/pipe-max-size
#
#  github-env:
#    if: false
#    runs-on: ubuntu-latest
#    steps:
#    - run: |
#        mkdir -p ~/.cpan/sources/modules/
#        echo "bla KARASIK/Prima-1.68001.tar.gz foo" | gzip > ~/.cpan/sources/modules/02packages.details.txt.gz
#        echo "<<$GITHUB_ENV>>"
#        if zgrep -q KARASIK/Prima-1.68001.tar.gz ~/.cpan/sources/modules/02packages.details.txt.gz; then echo "SKIP_PRIMA=true" >> $GITHUB_ENV; fi
#    - run: |
#        echo "This should not run!"
#      if: "!env.SKIP_PRIMA"
#
#  conditional-cpan-build:
#    if: false
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        repository: eserte/travis-helper-cpan-pm
#        #ref: master
#        path: travis-helper-cpan-pm
#    - name: before_install
#      run: |
#        $GITHUB_WORKSPACE/travis-helper-cpan-pm/travis-helper-cpan-pm --distroprefs=https://github.com/eserte/srezic-cpan-distroprefs --enable-sysdeps --sysdeps-branch=master
#    - name: check Prima version
#      run: |
#        ls -al ~/.cpan/sources/modules
#        echo "<<$GITHUB_ENV>>"
#        if zgrep -l KARASIK/Prima-1.68001.tar.gz ~/.cpan/sources/modules/02packages.details.txt.gz >/dev/null; then echo "SKIP_PRIMA=true" >> $GITHUB_ENV; fi
#    - name: install Prima
#      run: |
#        cpan Prima
#      if: "!env.SKIP_PRIMA"

#  doit-single-test-ubuntu:
#    runs-on: ubuntu-latest
#    steps:
#      - run: |
#          echo "::group::install"
#          sudo apt-get update -qq
#          sudo apt-get install -y libbsd-resource-perl libipc-run-perl
#          git clone https://github.com/eserte/Doit.git
#          cd Doit
#          #git checkout XXX-github-actions
#          perl Build.PL
#          perl Build
#          echo "::endgroup::"
#          #script -q -e -c 'echo "before test"; stty -a; DOIT_TEST_WITH_SUDO=1 prove -vb t/sudo.t; echo "after test"; stty -a' /dev/null
#          #script -q -e -c 'echo "before test"; stty -a; perl -Mblib -MDoit -e '\''my$sudo=Doit->init->do_sudo;$sudo->system("id");$sudo->system("id")'\''; echo "after test"; stty -a' /dev/null
#          #sudo apt-get install -y expect
#          #unbuffer sh -c 'echo "before test"; stty -a; perl -Mblib -MDoit -e '\''my$sudo=Doit->init->do_sudo;$sudo->system("id");$sudo->system("id")'\''; echo "after test"; stty -a'

  doit-single-test-mac:
    name: doit-single-test-mac on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    strategy:
      matrix:
        include:
          - os: macos-13
          - os: macos-14
          - os: macos-15
    steps:
      - run: |
          echo "::group::install"
          brew install pstree
          git clone https://github.com/eserte/Doit.git
          cd Doit
          git checkout XXX-github-actions
          perl Build.PL
          perl Build
          echo "::endgroup::"
          #echo "::group::all locales"
          #locale -a | sort
          #echo "::endgroup::"
          (sleep 20; pstree -pal $$) &
          #(sleep 21; ps auxgww) &
          DOIT_TRACE=1 DOIT_TEST_WITH_SUDO=1 prove -vb t/sudo.t

#  doit-windows:
#    runs-on: windows-latest
#    steps:
#      - uses: actions/checkout@v3
##      - run: |
##          cpanm --quiet --notest Config::IniFiles Config::IOD::INI
#      - run: |
#          git clone https://github.com/eserte/Doit.git
#          cd Doit
#          git checkout XXX-github-actions
#          perl Build.PL
#          perl Build
##      - run: |
##          perl -Mblib=Doit scripts\open3.pl
##      - run: |
##          cd Doit
##          perl -Mblib ..\scripts\doit-lineendings.pl
##          prove -bv t\ini.t
##      - run: |
##          #perl -Mblib=Doit -MDoit -e 'my$d=Doit->init;$d->change_file(q{Doit/t/open2.t}, {match=>qr{todo_skip},delete=>1});'
##          perl -i -nle 'next if /todo_skip/; print' Doit\t\open2.t
#      - run: |
#          cd Doit && prove -bv t\which.t
##      - run: |
##          perl -Mblib=Doit scripts\open2.pl

#  debugging-with-ssh:
#    if: false
#    runs-on: ubuntu-latest
#    steps:
#    - uses: actions/checkout@v2
#    - run: |
#        echo "My IP address: $(curl -s ipinfo.io/ip)"; true
#        curl -v --connect-timeout 5 http://bbbike.de/robots.txt > /dev/null || true
#    - name: Setup upterm session
#      uses: lhotari/action-upterm@v1
#      with:
#        limit-access-to-actor: true
#
#  network_check:
#    if: true
#    runs-on: ubuntu-latest
#    steps:
#    - run: |
#        echo "My IP address: $(curl -s ipinfo.io/ip)"; true
#        #curl --connect-timeout 5 https://www.bbbike.org/robots.txt > /dev/null
#        echo Run again non-80 port using libwww-perl
#        lwp-request -t 1 http://bbbike.de:8443/ || true
#        sleep 1
#        echo Run again non-80 port using curl
#        timeout 5 curl -v --connect-timeout 5 http://bbbike.de:8443 > /dev/null || true
#        echo Run again 80 port using libwww-perl
#        HEAD -t 5 http://bbbike.de/robots.txt
#        echo Run again 80 port using curl
#        curl -v --connect-timeout 5 http://bbbike.de/robots.txt > /dev/null
#
#  test_on_host:
#    if: false
#    name: Test on ${{ matrix.os }}
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
##       os: [ubuntu-latest, windows-latest, macos-latest]
##        os: [ubuntu-22.04]
#       os: [ubuntu-latest]
#
#    steps:
#    - name: show env
#      run: |
#        env | sort
#
#    - name: dummy run
#      run: echo "Every job needs at least one step"
#
#    - uses: hashicorp/setup-terraform@v1
#    - name: or true
#      run: |
#        terraform-bin import || true
#        echo "Should not appear as exit code 1"

#    - name: shell for
#      run: |
#        for i in 1 2 3; do
#          for j in a b c; do
#            echo "iteration i=$i j=$j"
#          done
#        done

#    - name: install perl
#      run: |
#        wget --quiet -O/tmp/perl-5.30.tar.bz2 https://storage.googleapis.com/travis-ci-language-archives/perl/binaries/ubuntu/22.04/x86_64/perl-5.36.tar.bz2
#        sudo tar xf /tmp/perl-5.30.tar.bz2 --directory /
#        ln -s /home/travis/perl5 ~/perl5
#    - name: test perl
#      run: |
#        eval $(/home/travis/perl5/perlbrew/bin/perlbrew env 5.30)
#        PATH=$PERLBREW_PATH:$PATH
#        perl -v

#    steps:
#    - name: apt hacks
#      # the already installed libgd3 conflicts with libgd-dev to be installed
#      # also, /etc/apt/sources.list should be sufficient; all the other repositories are possibly problematic
#      run: |
#        sudo rm -f /etc/apt/sources.list.d/*.list
#        sudo apt-get update -qq
#        sudo apt-get remove -y libgd3 nginx
#      if: "startsWith(matrix.os, 'ubuntu-')"
#
#    - name: "perl installation (macos)"
#      run: |
#        brew install cpanminus
#      if: "startsWith(matrix.os, 'macos-')"
#
#    - name: "perl installation (windows)"
#      run: |
#        if (!(Test-Path -Path "C:\strawberry")) {
#          cinst strawberryperl
#        }
#      if: "startsWith(matrix.os, 'windows-')"
#
#    - name: "perl installation (ubuntu)"
#      run: |
#        sudo apt-get install -q --no-install-recommends -y cpanminus
#      if: "startsWith(matrix.os, 'ubuntu-')"
#
#    - name: perl test
#      run: |
#        perl -V
#        which cpanm

#        sleep 10
#        echo hello
#        sleep 10
#        echo world

#
#    - name: enable travis-helper-cpan-pm
#      run: |
#        git clone https://github.com/eserte/travis-helper-cpan-pm.git && ./travis-helper-cpan-pm/travis-helper-cpan-pm --distroprefs=https://github.com/eserte/srezic-cpan-distroprefs --enable-sysdeps
#
#    - name: install Net::SSLeay
#      run: cpan Net::SSLeay
#    - name: check Net::SSLeay
#      run: perl -MNet::SSLeay -e1

#    steps:
#    - uses: actions/checkout@v1
#    - name: test git-short-status
#      run: |
#        set -x
#        git config --global user.email "you@example.com"
#        git config --global user.name "Your Name"
#
#        git clone https://github.com/eserte/Doit.git
#        cd Doit
#
#        perl -Ilib -MDoit -e 'my $d=Doit->init; $d->add_component(qw(git)); warn $d->git_short_status'
#        git status --untracked-files=no --porcelain
#
#        touch new_file
#        perl -Ilib -MDoit -e 'my $d=Doit->init; $d->add_component(qw(git)); warn $d->git_short_status'
#        git status --untracked-files=no --porcelain
#
#        git add new_file
#        perl -Ilib -MDoit -e 'my $d=Doit->init; $d->add_component(qw(git)); warn $d->git_short_status'
#        git status --untracked-files=no --porcelain
#
#        git commit -m "test" new_file
#        perl -Ilib -MDoit -e 'my $d=Doit->init; $d->add_component(qw(git)); warn $d->git_short_status'
#        git status --untracked-files=no --porcelain

#    steps:
#    - uses: actions/checkout@v1
#    - name: Try to install libgd-dev
#      run: |
#        cat /etc/apt/sources.list
#        sudo rm -f /etc/apt/sources.list.d/*.list
#        sudo apt-get update -qq
#        apt-cache policy libgd3
#        sudo apt-get remove libgd3
#        sudo apt-get install libgd-dev

#    steps:
#    - uses: actions/checkout@v1
#    - name: Install deps on Mac
#      run: |
#        cpan -T Date::Parse
#        cpan LWP
#        cpan LWP::Protocol::https
#      if: "startsWith(matrix.os, 'macos-')"
#    - name: Build and test
#      run: |
#        perl Makefile.PL
#        make all test
#      if: "!startsWith(matrix.os,'windows-')"
#    - name: Build and test on Windows
#      run: |
#        c:\strawberry\perl\bin\perl Makefile.PL
#        gmake all test
#      if: "startsWith(matrix.os, 'windows-')"

#  test_in_container:
#    name: Container tests with ${{ matrix.container }}
#    runs-on: ubuntu-20.04
#    container: ${{ matrix.container }}
#    strategy:
#      matrix:
#        include:
#          - container:    ubuntu:20.04
##          - container:    debian:jessie
##          - container:    ~
#
#    steps:
#    - name: install Inline::C
#      run: |
#        apt update
#        apt install -y perl-modules make gcc
#        cpan Inline::C
#        perl -e 'use Inline C => q{void test(){printf("Hello, world\n");}}; test();'

#    steps:
#    - uses: actions/checkout@v2
#    - name: Install deps
#      run: |
#        set -e
#        apt-get update -qq
#        apt-get install -q --no-install-recommends -y \
#            wget \
#            libimage-info-perl libplack-perl libcgi-emulate-psgi-perl libcgi-compile-perl \
#            libsereal-encoder-perl libsereal-decoder-perl \
#            libcpan-distnameinfo-perl libgravatar-url-perl libhtml-table-perl libwww-perl liburi-query-perl libjson-xs-perl libyaml-syck-perl
#      if: "matrix.dist == 'debian' || matrix.dist == 'ubuntu'"
#    - name: Build and test
#      run: |
#        set -e
#        true
#      if: "!startsWith(matrix.os,'windows-')"
